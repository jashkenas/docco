{"version":3,"file":"docco.js","sources":["docco.litcoffee"],"names":[],"mappings":"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","sourcesContent":["Docco\n=====\n\n**Docco** is a quick-and-dirty documentation generator, written in\n[Literate CoffeeScript](http://coffeescript.org/#literate).\nIt produces an HTML document that displays your comments intermingled with your\ncode. All prose is passed through\n[Markdown](http://daringfireball.net/projects/markdown/syntax), and code is\npassed through [Highlight.js](http://highlightjs.org/) syntax highlighting.\nThis page is the result of running Docco against its own\n[source file](https://github.com/jashkenas/docco/blob/master/docco.litcoffee).\n\n1. Install Docco with **npm**: `sudo npm install -g docco`\n\n2. Run it against your code: `docco src/*.coffee`\n\nThere is no \"Step 3\". This will generate an HTML page for each of the named\nsource files, with a menu linking to the other pages, saving the whole mess\ninto a `docs` folder (configurable).\n\nThe [Docco source](http://github.com/jashkenas/docco) is available on GitHub,\nand is released under the [MIT license](http://opensource.org/licenses/MIT).\n\nDocco can be used to process code written in any programming language. If it\ndoesn't handle your favorite yet, feel free to\n[add it to the list](https://github.com/jashkenas/docco/blob/master/resources/languages.json).\nFinally, the [\"literate\" style](http://coffeescript.org/#literate) of *any*\nlanguage is also supported — just tack an `.md` extension on the end:\n`.coffee.md`, `.py.md`, and so on.\n\n\nPartners in Crime:\n------------------\n\n* If Node.js doesn't run on your platform, or you'd prefer a more\nconvenient package, get [Ryan Tomayko](http://github.com/rtomayko)'s\n[Rocco](http://rtomayko.github.io/rocco/rocco.html), the **Ruby** port that's\navailable as a gem.\n\n* If you're writing shell scripts, try\n[Shocco](http://rtomayko.github.io/shocco/), a port for the **POSIX shell**,\nalso by Mr. Tomayko.\n\n* If **Python** is more your speed, take a look at\n[Nick Fitzgerald](http://github.com/fitzgen)'s [Pycco](https://pycco-docs.github.io/pycco/).\n\n* For **Clojure** fans, [Fogus](http://blog.fogus.me/)'s\n[Marginalia](http://fogus.me/fun/marginalia/) is a bit of a departure from\n\"quick-and-dirty\", but it'll get the job done.\n\n* There's a **Go** port called [Gocco](http://nikhilm.github.io/gocco/),\nwritten by [Nikhil Marathe](https://github.com/nikhilm).\n\n* For all you **PHP** buffs out there, Fredi Bach's\n[sourceMakeup](http://jquery-jkit.com/sourcemakeup/) (we'll let the faux pas\nwith respect to our naming scheme slide), should do the trick nicely.\n\n* **Lua** enthusiasts can get their fix with\n[Robert Gieseke](https://github.com/rgieseke)'s [Locco](http://rgieseke.github.io/locco/).\n\n* And if you happen to be a **.NET**\naficionado, check out [Don Wilson](https://github.com/dontangg)'s\n[Nocco](http://dontangg.github.io/nocco/).\n\n* Going further afield from the quick-and-dirty, [Groc](http://nevir.github.io/groc/)\nis a **CoffeeScript** fork of Docco that adds a searchable table of contents,\nand aims to gracefully handle large projects with complex hierarchies of code.\n\nNote that not all ports will support all Docco features ... yet.\n\n\nMain Documentation Generation Functions\n---------------------------------------\n\nGenerate the documentation for our configured source file by copying over static\nassets, reading all the source files in, splitting them up into prose+code\nsections, highlighting each file in the appropriate language, and printing them\nout in an HTML template.\n\n    document = require './src/document'\n\nGiven a string of source code, **parse** out each block of prose and the code that\nfollows it — by detecting which is which, line by line — and then create an\nindividual **section** for it. Each section is an object with `docsText` and\n`codeText` properties, and eventually `docsHtml` and `codeHtml` as well.\n\n    parse = require './src/parse'\n\nTo **format** and highlight the now-parsed sections of code, we use **Highlight.js**\nover stdio, and run the text of their corresponding comments through\n**Markdown**, using [Marked](https://github.com/chjj/marked).\n\n    format = require './src/format'\n\nConfiguration\n-------------\n\n**Configure** this particular run of Docco. We might use a passed-in external\ntemplate, or one of the built-in **layouts**. We only attempt to process\nsource files for languages for which we have definitions.\n\n    configure = require './src/configure'\n\n    getInformationOnFiles = require './src/getInformationOnFiles'\n\nHelpers & Initial Setup\n-----------------------\n\nRequire our external dependencies.\n\n    _           = require 'underscore'\n    fs          = require 'fs-extra'\n    path        = require 'path'\n    marked      = require 'marked'\n    commander   = require 'commander'\n    highlightjs = require 'highlight.js'\n    path        = require 'path'\n    glob        = require 'glob'\n\nLanguages are stored in JSON in the file `resources/languages.json`.\nEach item maps the file extension to the name of the language and the\n`symbol` that indicates a line comment. To add support for a new programming\nlanguage to Docco, just add it to the file.\n\n    languages = JSON.parse fs.readFileSync(path.join(__dirname, 'resources', 'languages.json'))\n\nKeep it DRY. Extract the docco **version** from `package.json`\n\n    version = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'))).version\n\nDefault configuration **options**. All of these may be extended by\nuser-specified options.\n\n    defaults =\n      layout:     'sidebyside'\n      output:     'docs'\n      template:   null\n      css:        null\n      extension:  null\n      languages:  {}\n      marked:     null\n      setup:      '.docco.json'\n      help:      false\n      flatten: false\n\nCommand Line Interface\n----------------------\n\nFinally, let's define the interface to run Docco from the command line.\nParse options using [Commander](https://github.com/visionmedia/commander.js).\n\n    run = (args = process.argv) ->\n      config = defaults\n\n      commander.version(version)\n        .usage('[options] [file]')\n        .option('-c, --css [file]',       'use a custom css file', config.css)\n        .option('-e, --extension [ext]',  'assume a file extension for all inputs', config.extension)\n        .option('-f, --flatten',          'flatten the directory hierarchy', config.flatten)\n        .option('-g, --languages [file]', 'use a custom languages.json', _.compose JSON.parse, fs.readFileSync)\n        .option('-l, --layout [name]',    'choose a layout (parallel, linear or classic)', config.layout)\n        .option('-m, --marked [file]',    'use custom marked options', config.marked)\n        .option('-o, --output [path]',    'output to a given folder', config.output)\n        .option('-s, --setup [file]',     'use configuration file, normally docco.json', '.docco.json')\n        .option('-t, --template [file]',  'use a custom .jst template', config.template)\n        .parse(args)\n        .name = \"docco\"\n\n      config = configure commander, defaults, languages\n\n      setup = path.resolve config.setup\n      if fs.existsSync(setup)\n        config = _.extend(config, JSON.parse fs.readFileSync setup) if setup\n\n      config.root = process.cwd()\n      if config.sources.length isnt 0\n        files =[]\n        for globName in config.sources\n          files = _.flatten _.union files, glob.sync path.resolve config.root, globName\n          if files.length is 0\n            files.push(globName) # not a glob.\n\n        config.sources = []\n        for file in files\n          config.sources.push path.relative(config.root, file)\n\n        config.informationOnFiles = getInformationOnFiles config\n\n        document config\n      else\n        console.log commander.helpInformation()\n      return\n\nPublic API\n----------\n\n    module.exports = Docco = {run, document, parse, format, languages, version}\n"]}