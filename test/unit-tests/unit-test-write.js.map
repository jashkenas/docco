{"version":3,"file":"unit-test-write.js","sources":["unit-test-write.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,MAAqB,OAAA,CAAQ,MAAR,CAArB,EAAE,mBAAF,EAAU;;AAA4B,MAAA,CAAA;;AAEtC,OAAA,GAAU,OAAA,CAAQ,SAAR;;AACV,OAAO,CAAC,MAAR,CAAe;EACb,aAAA,EAAe,IADF;EAEb,aAAA,EAAe,KAFF;EAGb,kBAAA,EAAoB,KAHP;CAAf;;AAMA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,CAAA,GAAI,OAAA,CAAQ,YAAR;;AAGJ,yBAAA,GAA4B,OAAA,CAAQ,0CAAR;;AAC5B,2BAAA,GAA8B,OAAA,CAAQ,4CAAR;;AAC9B,SAAA,GAAY;;AACZ,OAAO,CAAC,YAAR,CAAqB,UAArB,EAAiC;EAC/B,YAAA,EAAc,SAAA;AACZ,WAAO;EADK,CADiB;EAO/B,aAAA,EAAe,SAAC,WAAD,EAAc,IAAd;IACb,IAAG,SAAH;MACE,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,KAAtB,CAA4B,gCAA5B;aACA,MAAM,CAAC,KAAP,CAAa,IAAb,EAAkB,yBAAlB,EAFF;KAAA,MAAA;MAIE,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,KAAtB,CAA4B,oCAA5B;aACA,MAAM,CAAC,KAAP,CAAa,IAAb,EAAkB,2BAAlB,EALF;;EADa,CAPgB;CAAjC;;AAgBA,KAAA,GAAQ,OAAA,CAAQ,iBAAR;;AACN,YAAc,OAAA,CAAQ,aAAR;;AAEhB,QAAA,GAAW,OAAA,CAAQ,yBAAR;;AACX,2BAAA,GAA8B,OAAA,CAAQ,qCAAR;;AAC9B,6BAAA,GAAgC,OAAA,CAAQ,uCAAR;;AAEhC,QAAA,CAAS,aAAT,EAAwB,SAAA;EAEtB,EAAA,CAAG,6CAAH,EAAkD,SAAA;AAChD,QAAA;IAAA,SAAA,GAAY;IAEZ,MAAA,GAAS;IACT,MAAA,GACE;MAAA,GAAA,EAAK,qCAAL;MACA,SAAA,EAAU,SADV;MAEA,MAAA,EAAQ,MAFR;MAGA,IAAA,EAAM,UAHN;MAIA,GAAA,EAAK,WAJL;MAKA,OAAA,EAAS,CACP,wBADO,EAEP,WAFO,CALT;MASA,IAAA,EAAM,SATN;MAUA,kBAAA,EAAoB,2BAVpB;;IAYF,MAAM,CAAC,QAAP,GAAkB,CAAC,CAAC,QAAF,CAAW,QAAX;IAElB,QAAA,GAAW;MAAC;QACV,UAAA,EAAW,eADD;QAEV,UAAA,EAAW,gBAFD;QAGV,UAAA,EAAW,oDAHD;QAIV,UAAA,EAAW,EAJD;OAAD;;IAKX,MAAA,GAAS,KAAA,CAAM,MAAN,EAAc,QAAd,EAAwB,MAAxB;EAxBuC,CAAlD;EA2BA,EAAA,CAAG,+CAAH,EAAoD,SAAA;AAClD,QAAA;IAAA,SAAA,GAAY;IAEZ,MAAA,GAAS;IACT,MAAA,GACE;MAAA,GAAA,EAAK,qCAAL;MACA,SAAA,EAAU,SADV;MAEA,MAAA,EAAQ,MAFR;MAGA,IAAA,EAAM,UAHN;MAIA,GAAA,EAAK,WAJL;MAKA,OAAA,EAAS,CACP,wBADO,EAEP,WAFO,CALT;MASA,IAAA,EAAM,SATN;MAUA,kBAAA,EAAoB,6BAVpB;;IAYF,MAAM,CAAC,QAAP,GAAkB,CAAC,CAAC,QAAF,CAAW,QAAX;IAElB,QAAA,GAAW;MAAC;QACV,UAAA,EAAW,eADD;QAEV,UAAA,EAAW,gBAFD;QAGV,UAAA,EAAW,oDAHD;QAIV,UAAA,EAAW,EAJD;OAAD;;IAKX,MAAA,GAAS,KAAA,CAAM,MAAN,EAAc,QAAd,EAAwB,MAAxB;IACT,OAAO,CAAC,cAAR,CAAuB,UAAvB;EAzBkD,CAApD;AA7BsB,CAAxB","sourcesContent":["# This tests if write is working correctly.\n\n    { assert, should } = require('chai'); should()\n\n    mockery = require('mockery')\n    mockery.enable({\n      useCleanCache: true,\n      warnOnReplace: false,\n      warnOnUnregistered: false\n    })\n\n    path = require('path')\n    _ = require 'underscore'\n\n\n    resultOfTemplateFlattened = require './fakes/fake-linear-jst-flattened-result'\n    resultOfTemplateUnFlattened = require './fakes/fake-linear-jst-unflattened-result'\n    flattened = true\n    mockery.registerMock('fs-extra', {\n      readFileSync: () ->\n        return '{\n          \".coffee\":      {\"name\": \"coffeescript\", \"symbol\": \"#\"},\n          \".litcoffee\":   {\"name\": \"coffeescript\", \"symbol\": \"#\", \"literate\": true},\n          \".md\":          {\"name\": \"markdown\", \"symbol\": \"\", \"section\": \"#\", \"link\": \"!\", \"html\": true}\n        }'\n      writeFileSync: (destination, html) ->\n        if flattened\n          destination.should.be.equal(\"/Project/docs/fake_coffee.html\")\n          assert.equal(html,resultOfTemplateFlattened)\n        else\n          destination.should.be.equal(\"/Project/docs/src/fake_coffee.html\")\n          assert.equal(html,resultOfTemplateUnFlattened)\n    })\n\n    write = require '../../src/write'\n    { languages } = require('../../docco')\n\n    template = require './fakes/fake-linear-jst'\n    informationOnFilesFlattened = require './fakes/informationOnFilesFlattened'\n    informationOnFilesUnFlattened = require './fakes/informationOnFilesUnFlattened'\n\n    describe 'docco write', () ->\n\n      it 'writes to the correct flattened destination', () ->\n        flattened = true\n\n        source = \"src/fake_coffee.coffee\"\n        config =\n          css: \"/Project/resources/linear/docco.css\"\n          languages:languages\n          output: 'docs'\n          root: '/Project'\n          css: 'docco.css'\n          sources: [\n            \"src/fake_coffee.coffee\"\n            \"README.md\"\n          ]\n          root: __dirname\n          informationOnFiles: informationOnFilesFlattened\n\n        config.template = _.template template\n\n        sections = [{\n          \"docsText\":\"Some Doc Text\",\n          \"codeText\":\"Some code Text\",\n          \"codeHtml\":\"<div class='highlight'><pre>code=here;</pre></div>\",\n          \"docsHtml\":\"\"}]\n        result = write(source, sections, config)\n        return\n\n      it 'writes to the correct unflattened destination', () ->\n        flattened = false\n\n        source = \"src/fake_coffee.coffee\"\n        config =\n          css: \"/Project/resources/linear/docco.css\"\n          languages:languages\n          output: 'docs'\n          root: '/Project'\n          css: 'docco.css'\n          sources: [\n            \"src/fake_coffee.coffee\"\n            \"README.md\"\n          ]\n          root: __dirname\n          informationOnFiles: informationOnFilesUnFlattened\n\n        config.template = _.template template\n\n        sections = [{\n          \"docsText\":\"Some Doc Text\",\n          \"codeText\":\"Some code Text\",\n          \"codeHtml\":\"<div class='highlight'><pre>code=here;</pre></div>\",\n          \"docsHtml\":\"\"}]\n        result = write(source, sections, config)\n        mockery.deregisterMock('fs-extra')\n        return\n      return"]}