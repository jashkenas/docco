{"version":3,"file":"unit-test-buildMatchers.js","sources":["unit-test-buildMatchers.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,MAAqB,OAAA,CAAQ,MAAR,CAArB,EAAE,mBAAF,EAAU;;AAA4B,MAAA,CAAA;;AACtC,aAAA,GAAgB,OAAA,CAAQ,yBAAR;;AACf,YAAa,OAAA,CAAQ,aAAR;;AAEd,QAAA,CAAS,qBAAT,EAAgC,SAAA;EAE9B,EAAA,CAAG,gCAAH,EAAqC,SAAA;AAEnC,QAAA;IAAA,SAAA,GAAY,aAAA,CAAc,SAAd;AACZ;SAAA,gBAAA;;MACE,MAAM,CAAC,SAAP,CAAiB,CAAC,CAAC,cAAnB,EAAkC,MAAA,CAAA,OAAA,GAAS,CAAC,CAAC,MAAX,GAAkB,MAAlB,CAAlC;MACA,MAAM,CAAC,SAAP,CAAiB,CAAC,CAAC,aAAnB,EAAiC,mBAAjC;MACA,IAAG,CAAC,CAAC,IAAL;QACE,MAAM,CAAC,SAAP,CAAiB,CAAC,CAAC,WAAnB,EAA+B,MAAA,CAAA,GAAA,GAAM,CAAC,CAAC,IAAR,GAAa,sBAAb,CAA/B,EADF;;MAEA,IAAG,CAAC,CAAC,OAAL;qBACE,MAAM,CAAC,SAAP,CAAiB,CAAC,CAAC,cAAnB,EAAkC,MAAA,CAAA,GAAA,GAAM,CAAC,CAAC,OAAR,GAAgB,MAAhB,CAAlC,GADF;OAAA,MAAA;6BAAA;;AALF;;EAHmC,CAArC;AAF8B,CAAhC;;AAaA","sourcesContent":["# This tests if buildMatchers is working correctly.\n\n    { assert, should } = require('chai'); should()\n    buildMatchers = require '../../src/buildMatchers'\n    {languages} = require('../../docco')\n\n    describe 'docco buildMatchers', () ->\n\n      it 'buildMatchers some source code', () ->\n\n        languages = buildMatchers(languages)\n        for ext, l of languages\n          assert.deepEqual(l.commentMatcher,///^\\s*#{l.symbol}\\s?///)\n          assert.deepEqual(l.commentFilter,/(^#![/]|^\\s*#\\{)/)\n          if l.link\n            assert.deepEqual(l.linkMatcher,///^#{l.link}\\[(.+)\\]\\((.+)\\)///)\n          if l.section\n            assert.deepEqual(l.sectionMatcher,///^#{l.section}\\s?///)\n      return\n    return"]}