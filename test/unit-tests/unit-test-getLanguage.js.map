{"version":3,"file":"unit-test-getLanguage.js","sources":["unit-test-getLanguage.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAE,SAAW,OAAA,CAAQ,MAAR;;AAAiB,MAAA,CAAA;;AAC9B,WAAA,GAAc,OAAA,CAAQ,uBAAR;;AACb,YAAa,OAAA,CAAQ,aAAR;;AAEd,QAAA,CAAS,mBAAT,EAA8B,SAAA;EAE5B,EAAA,CAAG,2DAAH,EAAgE,SAAA;AAC9D,QAAA;IAAA,MAAA,GAAS;IACT,MAAA,GAAS;MAAE,SAAA,EAAU,SAAZ;;IACT,QAAA,GAAW,WAAA,CAAY,MAAZ,EAAoB,SAApB;IACX,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAxB,CAA8B,cAA9B;IACA,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAA1B,CAAgC,GAAhC;EAL8D,CAAhE;EAQA,EAAA,CAAG,wDAAH,EAA6D,SAAA;AAC3D,QAAA;IAAA,MAAA,GAAS;IACT,MAAA,GAAS;MAAE,SAAA,EAAU,SAAZ;;IACT,QAAA,GAAW,WAAA,CAAY,MAAZ,EAAoB,SAApB;IACX,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAxB,CAA8B,UAA9B;IACA,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAA1B,CAAgC,EAAhC;IACA,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,KAA3B,CAAiC,GAAjC;IACA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAxB,CAA8B,GAA9B;IACA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAC,IAAD;EARoC,CAA7D;EAWA,EAAA,CAAG,sDAAH,EAA2D,SAAA;AACzD,QAAA;IAAA,MAAA,GAAS;IACT,MAAA,GAAS;MAAE,SAAA,EAAU,SAAZ;;IACT,QAAA,GAAW,WAAA,CAAY,MAAZ,EAAoB,SAApB;IACX,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAxB,CAA8B,OAA9B;IACA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAC,IAAD;EALkC,CAA3D;AArB4B,CAA9B","sourcesContent":["# This tests if getLanguage is working correctly.\n\n    { should } = require('chai'); should()\n    getLanguage = require('../../src/getLanguage')\n    {languages} = require('../../docco')\n\n    describe 'docco getLanguage', () ->\n\n      it 'gets the right language for the given a coffescript file.', () ->\n        source = \"src/fake_coffee.coffee\"\n        config = { languages:languages }\n        language = getLanguage source, languages\n        language.name.should.be.equal(\"coffeescript\")\n        language.symbol.should.be.equal(\"#\")\n        return\n\n      it 'gets the right language for the given a markdown file.', () ->\n        source = \"README.md\"\n        config = { languages:languages }\n        language = getLanguage source, languages\n        language.name.should.be.equal(\"markdown\")\n        language.symbol.should.be.equal(\"\")\n        language.section.should.be.equal(\"#\")\n        language.link.should.be.equal(\"!\")\n        language.html.should.be.true\n        return\n\n      it 'gets the right language for the given an image file.', () ->\n        source = \"images/fluffybunny.jpg\"\n        config = { languages:languages }\n        language = getLanguage source, languages\n        language.name.should.be.equal(\"image\")\n        language.copy.should.be.true\n        return\n      return"]}