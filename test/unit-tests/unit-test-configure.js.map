{"version":3,"file":"unit-test-configure.js","sources":["unit-test-configure.litcoffee"],"names":[],"mappings":"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","sourcesContent":["# This tests if parse is working correctly.\n\n    _ = require 'underscore'\n    { assert, should } = require('chai'); should()\n    commander   = require 'commander'\n    configure = require '../../src/configure'\n    version = \"0.0.0\"\n    fs = {\n      readFileSync: () ->\n        return\n    }\n\n    describe 'docco configure', () ->\n\n      it 'configure docco', () ->\n\n        config =\n          layout:     'parallel'\n          output:     'docs'\n          template:   null\n          css:        null\n          extension:  null\n          languages:  {}\n          marked:     null\n          setup:      '.docco.json'\n          help:      false\n          flatten: false\n        args = [\n          \"bin/node\",\n          \"bin/docco\",\n          \"--setup=.adocco.json\"\n        ]\n        defaults =\n          layout:     'parallel'\n          output:     'docs'\n          template:   null\n          css:        null\n          extension:  null\n          languages:  {}\n          marked:     null\n          setup:      '.docco.json'\n          help:      false\n          flatten: false\n\n        commander.version(version)\n          .usage('[options] [file]')\n          .option('-c, --css [file]',       'use a custom css file', config.css)\n          .option('-e, --extension [ext]',  'assume a file extension for all inputs', config.extension)\n          .option('-f, --flatten',          'flatten the directory hierarchy', config.flatten)\n          .option('-L, --languages [file]', 'use a custom languages.json', _.compose JSON.parse, fs.readFileSync)\n          .option('-l, --layout [name]',    'choose a layout (parallel, linear or classic)', config.layout)\n          .option('-m, --marked [file]',    'use custom marked options', config.marked)\n          .option('-o, --output [path]',    'output to a given folder', config.output)\n          .option('-s, --setup [file]',     'use configuration file, normally docco.json', '.docco.json')\n          .option('-t, --template [file]',  'use a custom .jst template', config.template)\n          .parse(args)\n          .name = \"docco\"\n\n        config = configure commander, defaults\n\n        config.css.should.contain(\"resources/parallel/docco.css\")\n        config.flatten.should.be.equal(false)\n        config.layout.should.contain(\"resources/parallel\")\n        config.output.should.be.equal(\"docs\")\n        config.public.should.contain(\"resources/parallel/public\")\n        config.setup.should.be.equal(\".adocco.json\")\n        config.sources.length.should.be.equal(0)\n        config.template.should.be.ok\n\n        return\n      return\n"]}