{"version":3,"file":"unit-test-document.js","sources":["unit-test-document.litcoffee"],"names":[],"mappings":"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","sourcesContent":["# This tests if document is working correctly.\n\n    { assert, should } = require('chai'); should()\n    mockery = require('mockery')\n    mockery.enable({\n      useCleanCache: true,\n      warnOnReplace: false,\n      warnOnUnregistered: false\n    })\n    times = 0\n    mockery.registerMock('fs-extra', {\n      mkdirs: (dir, callback) ->\n        dir.should.be.equal('docs')\n        callback()\n        return\n      mkdirsSync: (dir) ->\n        if times is 0\n          dir.should.be.equal(__dirname+'/docs/.')\n        else\n          dir.should.be.equal(__dirname+'/docs/images')\n\n        times++\n        return\n      copy: (fromFile, toFile) ->\n        fromFile.should.be.equal(\"images/fluffybunny1.jpg\")\n        toFile.should.be.equal(__dirname+\"/docs/images/fluffybunny1.jpg\")\n        return\n      existsSync: (dir) ->\n        if times is 0\n          dir.should.be.equal(__dirname+'/docs/.')\n        else\n          dir.should.be.equal(__dirname+'/docs/images')\n        return\n      readFile: (file, callback) ->\n        file.should.be.equal('README.md')\n        callback(null, \"x=3\")\n        return\n      readFileSync: () ->\n        return '{\n            \".coffee\":      {\"name\": \"coffeescript\", \"symbol\": \"#\"},\n            \".litcoffee\":   {\"name\": \"coffeescript\", \"symbol\": \"#\", \"literate\": true},\n            \".md\":          {\"name\": \"markdown\", \"symbol\": \"\", \"section\": \"#\", \"link\": \"!\", \"html\": true}\n          }'\n      writeFileSync: (destination, html) ->\n        if flattened\n          destination.should.be.equal(\"/Project/docs/fake_coffee.html\")\n          assert.equal(html,resultOfTemplateFlattened)\n        else\n          destination.should.be.equal(\"/Project/docs/src/fake_coffee.html\")\n          assert.equal(html,resultOfTemplateUnFlattened)\n        return\n    })\n\n    mockery.registerMock('parse', (source, language, code, config = {}) ->\n    )\n    mockery.registerMock('format', (source, language, sections, config) ->\n    )\n    mockery.registerMock('./write', (source, sections, config) ->\n      source.should.be.equal(\"README.md\")\n      assert.deepEqual(sections, [\n          {\n            \"docsText\": \"x=3\\n\",\n            \"codeText\": \"\",\n            \"codeHtml\": \"\",\n            \"docsHtml\": \"<p>x=3</p>\\n\"\n          }\n      ])\n    )\n    informationOnFiles = require('./fakes/informationOnFilesUnFlattened')\n\n    document = require '../../src/document'\n\n    describe 'docco document', () ->\n\n      it 'document docco', () ->\n        config =\n          output:     'docs'\n          sources: [\n            \"README.md\",\n            \"images/fluffybunny1.jpg\"\n          ]\n          root: __dirname\n          informationOnFiles: informationOnFiles\n\n        document(config)\n        return\n      return\n\n    mockery.deregisterMock('./parse')\n    mockery.deregisterMock('./format')\n    mockery.deregisterMock('./write')\n    mockery.deregisterMock('fs-extra')"]}