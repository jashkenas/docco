{"version":3,"file":"unit-test-getDestinationInformation.js","sources":["unit-test-getDestinationInformation.litcoffee"],"names":[],"mappings":"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","sourcesContent":["# This tests if getLanguage is working correctly.\n\n    { assert, should } = require('chai'); should()\n    { languages } = require('../../docco')\n    getDestinationInformation = require '../../src/getDestinationInformation'\n    getLanguage = require '../../src/getLanguage'\n\n    describe 'docco getDestinationInformation', () ->\n\n      it 'unflattened: gets destinationInformation for one source', () ->\n        file = \"src/fake_coffee.coffee\"\n        config = { languages:languages }\n        language = getLanguage file, languages\n        source = {\n          \"root\":\"/Project\",\n          \"dir\":\"src\",\n          \"base\":\"fake_coffee.coffee\",\n          \"ext\":\".coffee\",\n          \"name\":\"fake_coffee\",\n          \"file\":\"src/fake_coffee.coffee\",\n          \"path\":\"/Project/src/fake_coffee.coffee\"\n        }\n        rootDirectory = '/Project'\n        targetDirectory = 'docs'\n        flatten = false\n        destination = getDestinationInformation(language, source, rootDirectory, targetDirectory, flatten)\n        result = {\n          \"root\": \"/Project\",\n          \"dir\": \"docs/src\",\n          \"ext\": \".html\",\n          \"base\": \"fake_coffee.html\",\n          \"name\": \"fake_coffee\",\n          \"file\": \"docs/src/fake_coffee.html\",\n          \"path\": \"/Project/docs/src/fake_coffee.html\",\n          \"pathdir\": \"/Project/docs/src\",\n          \"relativefile\": \"src/fake_coffee.html\"\n        }\n        assert.deepEqual(destination, result)\n        return\n\n      it 'flattened: gets destinationInformation for one source', () ->\n        file = \"src/fake_coffee.coffee\"\n        config = { languages:languages }\n        language = getLanguage file, languages\n        source = {\n          \"root\":\"/Project\",\n          \"dir\":\"src\",\n          \"base\":\"fake_coffee.coffee\",\n          \"ext\":\".coffee\",\n          \"name\":\"fake_coffee\",\n          \"file\":\"src/fake_coffee.coffee\",\n          \"path\":\"/Project/src/fake_coffee.coffee\"\n        }\n        rootDirectory = '/Project'\n        targetDirectory = 'docs'\n        flatten = true\n        destination = getDestinationInformation(language, source, rootDirectory, targetDirectory, flatten)\n        result = {\n          \"base\": \"fake_coffee.html\"\n          \"dir\": \"docs\"\n          \"ext\": \".html\"\n          \"file\": \"docs/fake_coffee.html\"\n          \"name\": \"fake_coffee\"\n          \"path\": \"/Project/docs/fake_coffee.html\"\n          \"pathdir\": \"/Project/docs\"\n          \"root\": \"/Project\"\n          \"relativefile\": \"fake_coffee.html\"\n        }\n        assert.deepEqual(destination, result)\n        return\n\n      it 'unflattened: gets destinationInformation for one copy source', () ->\n        file = \"images/fluffybunny1.jpg\"\n        config = { languages:languages }\n        language = getLanguage file, languages\n        language.copy.should.be.true\n\n        source = {\n          \"root\":\"/Project\",\n          \"dir\":\"images\",\n          \"base\":\"fluffybunny1.jpg\",\n          \"ext\":\".jpg\",\n          \"name\":\"fluffybunny1\",\n          \"file\":\"images/fluffybunny1.jpg\",\n          \"path\":\"/Project/images/fluffybunny1.jpg\"\n        }\n        rootDirectory = '/Project'\n        targetDirectory = 'docs'\n        flatten = false\n        destination = getDestinationInformation(language, source, rootDirectory, targetDirectory, flatten)\n        result = {\n          \"root\": \"/Project\",\n          \"dir\": \"docs/images\",\n          \"base\": \"fluffybunny1.jpg\",\n          \"ext\": \".jpg\",\n          \"name\": \"fluffybunny1\",\n          \"file\": \"docs/images/fluffybunny1.jpg\",\n          \"path\": \"/Project/docs/images/fluffybunny1.jpg\",\n          \"pathdir\": \"/Project/docs/images\",\n          \"relativefile\": \"images/fluffybunny1.jpg\"\n        }\n        assert.deepEqual(destination, result)\n        return\n\n      it 'flattened: gets destinationInformation for one copy source', () ->\n        file = \"images/fluffybunny1.jpg\"\n        config = { languages:languages }\n        language = getLanguage file, languages\n        language.copy.should.be.true\n        source = {\n          \"root\":\"/Project\",\n          \"dir\":\"images\",\n          \"base\":\"fluffybunny1.jpg\",\n          \"ext\":\".jpg\",\n          \"name\":\"fluffybunny1\",\n          \"file\":\"images/fluffybunny1.jpg\",\n          \"path\":\"/Project/images/fluffybunny1.jpg\"\n        }\n        rootDirectory = '/Project'\n        targetDirectory = 'docs'\n        flatten = true\n        destination = getDestinationInformation(language, source, rootDirectory, targetDirectory, flatten)\n        result = {\n          \"root\": \"/Project\"\n          \"dir\": \"docs/images\"\n          \"base\": \"fluffybunny1.jpg\"\n          \"ext\": \".jpg\"\n          \"name\": \"fluffybunny1\"\n          \"file\": \"docs/images/fluffybunny1.jpg\"\n          \"path\": \"/Project/docs/images/fluffybunny1.jpg\"\n          \"pathdir\": \"/Project/docs/images\"\n          \"relativefile\": \"images/fluffybunny1.jpg\"\n        }\n        assert.deepEqual(destination, result)\n        return\n      return"]}