{"version":3,"file":"unit-test-typeIsArray.js","sources":["unit-test-typeIsArray.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,MAAA,GAAS,IAAI,CAAC;;AACd,MAAA,GAAS,IAAI,CAAC,MAAL,CAAA;;AACT,MAAA,GAAS,IAAI,CAAC;;AAEd,WAAA,GAAc,OAAA,CAAQ,qBAAR;;AAEd,QAAA,CAAS,kBAAT,EAA6B,SAAA;EAE3B,EAAA,CAAG,kCAAH,EAAuC,SAAA;AACrC,QAAA;IAAA,CAAA,GAAE,CAAC,CAAD,EAAG,CAAH,EAAK,GAAL;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,IAA/B;EAFqC,CAAvC;EAIA,EAAA,CAAG,uCAAH,EAA4C,SAAA;AAC1C,QAAA;IAAA,CAAA,GAAE;MAAC,CAAA,EAAE,CAAH;MAAK,CAAA,EAAE,CAAP;MAAS,CAAA,EAAE,CAAX;;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,KAA/B;EAF0C,CAA5C;EAIA,EAAA,CAAG,wDAAH,EAA6D,SAAA;AAC3D,QAAA;IAAA,CAAA,GAAE;MAAC,CAAA,EAAE,CAAC,CAAD,CAAH;MAAO,CAAA,EAAE,CAAC,CAAD,CAAT;MAAa,CAAA,EAAE,CAAC,CAAD,CAAf;;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,KAA/B;EAF2D,CAA7D;EAIA,EAAA,CAAG,uCAAH,EAA4C,SAAA;AAC1C,QAAA;IAAA,CAAA,GAAE;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,KAA/B;EAF0C,CAA5C;EAIA,EAAA,CAAG,uCAAH,EAA4C,SAAA;AAC1C,QAAA;IAAA,CAAA,GAAE;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,KAA/B;EAF0C,CAA5C;SAIA,EAAA,CAAG,wCAAH,EAA6C,SAAA;AAC3C,QAAA;IAAA,CAAA,GAAE;WACF,WAAA,CAAY,CAAZ,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAzB,CAA+B,KAA/B;EAF2C,CAA7C;AAtB2B,CAA7B","sourcesContent":["#\n\n    chai = require('chai')\n    expect = chai.expect\n    should = chai.should()\n    assert = chai.assert\n\n    typeIsArray = require('./utils/typeIsArray')\n\n    describe 'test typeIsArray', () ->\n\n      it 'given array, says it is an array', () ->\n        x=[1,2,'3']\n        typeIsArray(x).should.be.equal(true)\n\n      it 'given object, says it is NOT an array', () ->\n        x={a:1,b:2,c:3}\n        typeIsArray(x).should.be.equal(false)\n\n      it 'given object with array field, says it is NOT an array', () ->\n        x={a:[1],b:[2],c:[3]}\n        typeIsArray(x).should.be.equal(false)\n\n      it 'given string, says it is NOT an array', () ->\n        x=\"hi\"\n        typeIsArray(x).should.be.equal(false)\n\n      it 'given number, says it is NOT an array', () ->\n        x=1\n        typeIsArray(x).should.be.equal(false)\n\n      it 'given boolean, says it is NOT an array', () ->\n        x=true\n        typeIsArray(x).should.be.equal(false)\n\n"]}