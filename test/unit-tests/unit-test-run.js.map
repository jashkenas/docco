{"version":3,"file":"unit-test-run.js","sources":["unit-test-run.litcoffee"],"names":[],"mappings":"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","sourcesContent":["# This tests if run is working correctly.\n\n    { assert, should } = require('chai'); should()\n    fixForMatch = require './utils/fixForMatch'\n    mockery = require('mockery')\n    mockery.enable({\n      useCleanCache: true,\n      warnOnReplace: false,\n      warnOnUnregistered: false\n    })\n    times = 0\n    mockery.registerMock('fs-extra', {\n      existsSync: (file) ->\n\n      readFileSync: (file) ->\n        if times is 0\n          times++\n          return '{ \"coffeescript\": {\"name\":\"coffeescript\",\"symbol\":\"#\"},' +\n              ' \".markdown\": {\"name\": \"markdown\", \"symbol\": \"\", \"section\": \"#\", \"link\": \"!\", \"html\": true},' +\n              ' \".md\": {\"name\": \"markdown\", \"symbol\": \"\", \"section\": \"#\", \"link\": \"!\", \"html\": true}}'\n        else\n          return '{  \"version\": \"1.0.0\" }'\n\n    })\n    mockery.registerMock('./src/document', (config) ->\n      fakeConfig = require './fakes/fake-config'\n      fakeConfig = fixForMatch(fakeConfig, ['path', 'pathdir','root'])\n      config = fixForMatch(config, ['path', 'pathdir','root'])\n\n      assert.deepEqual(config, fakeConfig)\n    )\n    mockery.registerMock('./src/configure', (commander, defaults, languages) ->\n      commander.name.should.be.equal('docco')\n      assert.deepEqual(languages, {\n          \".markdown\": {\n            \"html\": true\n            \"link\": \"!\"\n            \"name\": \"markdown\"\n            \"section\": \"#\"\n            \"symbol\": \"\"\n          }\n          \".md\": {\n            \"html\": true\n            \"link\": \"!\"\n            \"name\": \"markdown\"\n            \"section\": \"#\"\n            \"symbol\": \"\"\n          }\n          \"coffeescript\": {\n            \"name\": \"coffeescript\"\n            \"symbol\": \"#\"\n          }\n      })\n      assert.deepEqual(defaults, {\n        \"layout\": \"sidebyside\",\n        \"output\": \"docs\",\n        \"template\": null,\n        \"css\": null,\n        \"extension\": null,\n        \"languages\": {},\n        \"marked\": null,\n        \"setup\": \".docco.json\",\n        \"help\": false,\n        \"flatten\": false\n      })\n      defaults.sources = [\n        \"README.md\",\n        \"images/fluffybunny1.jpg\"\n      ]\n      defaults.languages = languages\n      defaults.css = 'docco.css'\n      defaults.extension = '.md'\n      return defaults\n    )\n    optionTimes = 0\n    mockery.registerMock('commander', {\n      version: (version) ->\n        version.should.be.equal('1.0.0')\n        return @\n      usage: (usage) ->\n        usage.should.be.equal('[options] [file]')\n        return @\n      option: (option, description, value) ->\n        optionTimes++\n        switch optionTimes\n          when 1 then option.should.be.equal('-c, --css [file]')\n          when 2 then option.should.be.equal('-e, --extension [ext]')\n          when 3 then option.should.be.equal('-f, --flatten')\n          when 4 then option.should.be.equal('-g, --languages [file]')\n          when 5 then option.should.be.equal('-l, --layout [name]')\n          when 6 then option.should.be.equal('-m, --marked [file]')\n          when 7 then option.should.be.equal('-o, --output [path]')\n          when 8 then option.should.be.equal('-s, --setup [file]')\n          when 9 then option.should.be.equal('-t, --template [file]')\n        return @\n      parse: (args) ->\n        assert.deepEqual(args, [\"--flatten\"])\n        return @\n      name: (name) ->\n        name.should.be.equal('name')\n        return @\n    })\n    { run } = require '../../docco'\n\n    describe 'docco', () ->\n      it 'handles parameters correctly', () ->\n        run([\"--flatten\"])\n\n      mockery.deregisterMock('./src/document')\n"]}