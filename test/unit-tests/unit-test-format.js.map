{"version":3,"file":"unit-test-format.js","sources":["unit-test-format.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,MAAqB,OAAA,CAAQ,MAAR,CAArB,EAAE,mBAAF,EAAU;;AAA4B,MAAA,CAAA;;AACtC,MAAA,GAAS,OAAA,CAAQ,kBAAR;;AACT,aAAA,GAAgB,OAAA,CAAQ,yBAAR;;AAEhB,QAAA,CAAS,cAAT,EAAyB,SAAA;EAEvB,EAAA,CAAG,cAAH,EAAmB,SAAA;AAEjB,QAAA;IAAA,MAAA,GAAS;IACT,MAAA,GACE;MAAA,MAAA,EAAY,UAAZ;MACA,MAAA,EAAY,MADZ;MAEA,QAAA,EAAY,IAFZ;MAGA,GAAA,EAAY,IAHZ;MAIA,SAAA,EAAY,IAJZ;MAKA,SAAA,EAAY,EALZ;MAMA,MAAA,EAAY,IANZ;MAOA,KAAA,EAAY,aAPZ;MAQA,IAAA,EAAW,KARX;MASA,OAAA,EAAS,KATT;;IAUF,SAAA,GAAY;MAAC;QAAC,MAAA,EAAO,cAAR;QAAuB,QAAA,EAAS,GAAhC;QAAoC,gBAAA,EAAiB,EAArD;QAAwD,eAAA,EAAgB,EAAxE;OAAD;;IACZ,SAAA,GAAY,aAAA,CAAc,SAAd;IAEZ,QAAA,GAAW;MACT;QACE,UAAA,EAAY,eADd;QAEE,UAAA,EAAY,oCAFd;OADS,EAKT;QACE,UAAA,EAAY,eADd;QAEE,UAAA,EAAY,8BAFd;OALS,EAST;QACE,UAAA,EAAY,cADd;QAEE,UAAA,EAAY,2BAFd;OATS;;IAcX,MAAA,CAAO,MAAP,EAAe,SAAU,CAAA,CAAA,CAAzB,EAA6B,QAA7B,EAAuC,MAAvC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,eAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,oCAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,+IAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,sBAArC;IAEA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,eAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,8BAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,yIAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,sBAArC;IAEA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,cAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,2BAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,4KAArC;IACA,QAAS,CAAA,CAAA,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAA/B,CAAqC,qBAArC;EA7CiB,CAAnB;AAFuB,CAAzB","sourcesContent":["# This tests if parse is working correctly.\n\n    { assert, should } = require('chai'); should()\n    format = require '../../src/format'\n    buildMatchers = require '../../src/buildMatchers'\n\n    describe 'docco format', () ->\n\n      it 'format docco', () ->\n\n        source = 'fakes/fake_coffee.coffee'\n        config =\n          layout:     'parallel'\n          output:     'docs'\n          template:   null\n          css:        null\n          extension:  null\n          languages:  {}\n          marked:     null\n          setup:      '.docco.json'\n          help:      false\n          flatten: false\n        languages = [{\"name\":\"coffeescript\",\"symbol\":\"#\",\"commentMatcher\":{},\"commentFilter\":{}}]\n        languages = buildMatchers languages\n\n        sections = [\n          {\n            \"docsText\": \"Assignment:\\n\",\n            \"codeText\": \"number   = 42\\nopposite = true\\n\\n\"\n          },\n          {\n            \"docsText\": \"Conditions:\\n\",\n            \"codeText\": \"number = -42 if opposite\\n\\n\"\n          },\n          {\n            \"docsText\": \"Functions:\\n\",\n            \"codeText\": \"square = (x) -> x * x\\n\\n\"\n          }\n        ]\n        format(source, languages[0], sections, config)\n        sections[0].docsText.should.be.equal(\"Assignment:\\n\")\n        sections[0].codeText.should.be.equal(\"number   = 42\\nopposite = true\\n\\n\")\n        sections[0].codeHtml.should.be.equal(\"<div class='highlight'><pre>number   = <span class=\\\"hljs-number\\\">42</span>\\nopposite = <span class=\\\"hljs-literal\\\">true</span></pre></div>\")\n        sections[0].docsHtml.should.be.equal(\"<p>Assignment:</p>\\n\")\n\n        sections[1].docsText.should.be.equal(\"Conditions:\\n\")\n        sections[1].codeText.should.be.equal(\"number = -42 if opposite\\n\\n\")\n        sections[1].codeHtml.should.be.equal(\"<div class='highlight'><pre>number = <span class=\\\"hljs-number\\\">-42</span> <span class=\\\"hljs-keyword\\\">if</span> opposite</pre></div>\")\n        sections[1].docsHtml.should.be.equal(\"<p>Conditions:</p>\\n\")\n\n        sections[2].docsText.should.be.equal(\"Functions:\\n\")\n        sections[2].codeText.should.be.equal(\"square = (x) -> x * x\\n\\n\")\n        sections[2].codeHtml.should.be.equal(\"<div class='highlight'><pre><span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">square</span> = <span class=\\\"hljs-params\\\">(x)</span> -&gt;</span> x * x</pre></div>\")\n        sections[2].docsHtml.should.be.equal(\"<p>Functions:</p>\\n\")\n\n        return\n      return\n\n"]}