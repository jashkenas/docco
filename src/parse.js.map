{"version":3,"file":"parse.js","sources":["parse.litcoffee"],"names":[],"mappings":"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","sourcesContent":["    _           = require 'underscore'\n    fs          = require 'fs-extra'\n    path        = require 'path'\n    marked      = require 'marked'\n    commander   = require 'commander'\n    Handlebars  = require 'handlebars'\n    highlightjs = require 'highlight.js'\n    path        = require 'path'\n    glob        = require 'glob'\n    htmlImageMatcher = /^<img .*\\/>/\n\n    imageLinkTemplate = Handlebars.compile('<div><img src=\"{{link}}\" style=\"{{style}}\"></img><p>{{text}}</p></div>\\n')\n    hrefLinkTemplate = Handlebars.compile('<div><a href=\"{{link}}\" style=\"{{style}}\">{{text}}</a></div>\\n')\n\nGiven a string of source code, **parse** out each block of prose and the code that\nfollows it — by detecting which is which, line by line — and then create an\nindividual **section** for it. Each section is an object with `docsText` and\n`codeText` properties, and eventually `docsHtml` and `codeHtml` as well.\n\n    module.exports = parse = (source, language, code, config = {}) ->\n      lines    = code.split '\\n'\n      sections = []\n\n      hasCode  = docsText = codeText = ''\n\n      save = ->\n        sections.push {docsText, codeText}\n        hasCode = docsText = codeText = ''\n        return\n\nOur quick-and-dirty implementation of the literate programming style. Simply\ninvert the prose and code relationship on a per-line basis, and then continue as\nnormal below.\n\n      if language.literate\n        isText = maybeCode = yes\n        for line, i in lines\n          lines[i] = if maybeCode and match = /^([ ]{4}|[ ]{0,3}\\t)/.exec line\n            isText = no\n            line[match[0].length..]\n          else if maybeCode = /^\\s*$/.test line\n            if isText then language.symbol else ''\n          else\n            isText = yes\n            language.symbol + ' ' + line\n\n      getLinkComponents = (line, matcher) ->\n        # todo: use the matcher with groups!\n        LINK_REGEX = /\\((.+?)\\)/\n        TEXT_REGEX = /\\[(.+?)\\]/\n        STYLE_REGEX = /\\{(.+?)\\}/\n        links = LINK_REGEX.exec(line)\n        texts = TEXT_REGEX.exec(line)\n        styles = STYLE_REGEX.exec(line)\n        if links? and links.length > 0 and texts? and texts.length > 1\n          link = links[1] # grab the first group.\n          if texts and texts.length > 0 then text = texts[1] else text = ''\n          if styles and styles.length > 0 then style = styles[1] else style = ''\n          return { link, text, style }\n        else\n          return null\n\n      makeLink = (line, parts, template) ->\n        return template(parts)\n\n      for line in lines\n        if language.imageMatcher and line.match language.imageMatcher\n          parts = getLinkComponents line, language.imageMatcher\n          codeText += imageLinkTemplate(parts) if parts?\n          hasCode = yes\n\n        else if language.linkMatcher and line.match language.linkMatcher\n          parts = getLinkComponents line, language.linkMatcher\n          codeText += hrefLinkTemplate(parts) if parts?\n          hasCode = yes\n\n        else if line.match(htmlImageMatcher)  # only one per line!\n          codeText += line + '\\n'\n          hasCode = yes\n\n        else if multilineComment and # stop\n        (language.stopMatcher and line.match(language.stopMatcher))\n          multilineComment = false\n          docsText += (line = line.replace(language.stopMatcher, '')) + '\\n'\n          hasCode = yes\n\n        else if multilineComment or # start\n        (language.startMatcher and line.match(language.startMatcher))\n          multilineComment = true\n          save() if hasCode\n          docsText += (line = line.replace(language.startMatcher, '')) + '\\n'\n\n        else if textToCode and # start\n        (language.codeMatcher and line.match(language.codeMatcher))\n          textToCode = false\n          text = (line = line.replace(language.codeMatcher, '')) + '\\n'\n          text += \"</pre>\" if language.html\n          save() if hasCode\n          codeText += text\n        else if textToCode or # stop\n        (language.codeMatcher and line.match(language.codeMatcher))\n          textToCode = true\n          hasCode = yes\n          if language.html then text = \"<pre>\" else text = \"\"\n          text += (line = line.replace(language.codeMatcher, '')) + '\\n'\n          codeText += text\n        else if language.sectionMatcher and line.match(language.sectionMatcher)\n          save() if hasCode\n          docsText += (line = line.replace(language.commentMatcher, '')) + '\\n'\n          save()\n        else if line.match(language.commentMatcher) and not line.match(language.commentFilter)\n          save() if hasCode\n          docsText += (line = line.replace(language.commentMatcher, '')) + '\\n'\n          save() if /^(---+|===+)$/.test line\n        else\n          hasCode = yes\n          codeText += line + '\\n'\n      save()\n\n      sections\n\n"]}