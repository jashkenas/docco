{"version":3,"file":"configure.js","sources":["configure.litcoffee"],"names":[],"mappings":"AAAI,IAAA,kDAAA;EAAA;;AAAA,CAAA,GAAI,OAAA,CAAQ,YAAR;;AACJ,EAAA,GAAK,OAAA,CAAQ,UAAR;;AACL,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,WAAA,GAAc,OAAA,CAAQ,eAAR;;AACd,aAAA,GAAgB,OAAA,CAAQ,iBAAR;;AAMhB,MAAM,CAAC,OAAP,GAAiB,SAAA,GAAY,SAAC,OAAD,EAAU,QAAV,EAAoB,SAApB;AAC3B,MAAA;EAAA,MAAA,GAAS,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,CAAC,CAAC,IAAF,UAAO,CAAA,OAAS,SAAA,WAAA,CAAC,CAAC,IAAF,CAAO,QAAP,CAAA,CAAA,CAAhB,CAAvB;EAIT,MAAM,CAAC,SAAP,GAAmB,aAAA,CAAc,SAAd;EAOnB,IAAG,OAAO,CAAC,QAAX;IACE,IAAA,CAAO,OAAO,CAAC,GAAf;MACE,OAAO,CAAC,IAAR,CAAa,qCAAb,EADF;;IAEA,MAAM,CAAC,MAAP,GAAgB,KAHlB;GAAA,MAAA;IAKE,GAAA,GAAM,MAAM,CAAC,MAAP,GAAgB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,cAArB,EAAqC,MAAM,CAAC,MAA5C;IACtB,IAAiD,EAAE,CAAC,UAAH,CAAc,IAAI,CAAC,IAAL,CAAU,GAAV,EAAe,QAAf,CAAd,CAAjD;MAAA,MAAM,EAAC,MAAD,EAAN,GAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,EAAe,QAAf,EAAtB;;IACA,MAAM,CAAC,QAAP,GAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,EAAe,WAAf;IACtB,MAAM,CAAC,GAAP,GAAsB,OAAO,CAAC,GAAR,IAAe,IAAI,CAAC,IAAL,CAAU,GAAV,EAAe,WAAf,EARvC;;EASA,MAAM,CAAC,QAAP,GAAkB,CAAC,CAAC,QAAF,CAAW,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,QAAvB,CAAgC,CAAC,QAAjC,CAAA,CAAX;EAElB,IAAG,OAAO,CAAC,MAAX;IACE,MAAM,CAAC,MAAP,GAAgB,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,YAAH,CAAgB,OAAO,CAAC,MAAxB,CAAX,EADlB;;EAGA,MAAM,CAAC,OAAP,GAAiB,OAAO,CAAC,IAAI,CAAC,MAAb,CAAoB,SAAC,MAAD;AACnC,QAAA;IAAA,IAAA,GAAO,WAAA,CAAY,MAAZ,EAAoB,SAApB,EAA+B,MAAM,CAAC,SAAtC;IACP,IAAA,CAA4E,IAA5E;MAAA,OAAO,CAAC,IAAR,CAAa,+BAAA,GAA+B,CAAC,IAAI,CAAC,QAAL,CAAc,MAAd,CAAD,CAA/B,GAAqD,GAAlE,EAAA;;WACA;EAHmC,CAApB,CAIhB,CAAC,IAJe,CAAA;SAMjB;AAhC2B","sourcesContent":["    _ = require 'underscore'\n    fs = require 'fs-extra'\n    path = require 'path'\n    getLanguage = require './getLanguage'\n    buildMatchers = require './buildMatchers'\n\n**Configure** this particular run of Docco. We might use a passed-in external\ntemplate, or one of the built-in **layouts**. We only attempt to process\nsource files for languages for which we have definitions.\n\n    module.exports = configure = (options, defaults, languages) ->\n      config = _.extend {}, defaults, _.pick(options, _.keys(defaults)...)\n\nBuild out the appropriate matchers and delimiters for each language.\n\n      config.languages = buildMatchers languages\n\nThe user is able to override the layout file used with the `--template` parameter.\nIn this case, it is also neccessary to explicitly specify a stylesheet file.\nThese custom templates are compiled exactly like the predefined ones, but the `public` folder\nis only copied for the latter.\n\n      if options.template\n        unless options.css\n          console.warn \"docco: no stylesheet file specified\"\n        config.layout = null\n      else\n        dir = config.layout = path.join __dirname, '../resources', config.layout\n        config.public       = path.join dir, 'public' if fs.existsSync path.join dir, 'public'\n        config.template     = path.join dir, 'docco.jst'\n        config.css          = options.css or path.join dir, 'docco.css'\n      config.template = _.template fs.readFileSync(config.template).toString()\n\n      if options.marked\n        config.marked = JSON.parse fs.readFileSync(options.marked)\n\n      config.sources = options.args.filter((source) ->\n        lang = getLanguage source, languages, config.extension\n        console.warn \"docco: skipped unknown type (#{path.basename source})\" unless lang\n        lang\n      ).sort()\n\n      config\n"]}