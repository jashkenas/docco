{"version":3,"file":"document.js","sources":["document.litcoffee"],"names":[],"mappings":"AAAI,IAAA;;AAAA,CAAA,GAAc,OAAA,CAAQ,YAAR;;AACd,EAAA,GAAc,OAAA,CAAQ,UAAR;;AACd,IAAA,GAAc,OAAA,CAAQ,MAAR;;AACd,MAAA,GAAc,OAAA,CAAQ,QAAR;;AACd,SAAA,GAAc,OAAA,CAAQ,WAAR;;AACd,WAAA,GAAc,OAAA,CAAQ,cAAR;;AACd,IAAA,GAAc,OAAA,CAAQ,MAAR;;AACd,IAAA,GAAc,OAAA,CAAQ,MAAR;;AAEd,WAAA,GAAc,OAAA,CAAQ,eAAR;;AACd,KAAA,GAAQ,OAAA,CAAQ,SAAR;;AACR,MAAA,GAAS,OAAA,CAAQ,UAAR;;AACT,KAAA,GAAQ,OAAA,CAAQ,SAAR;;AAOR,QAAA,GAAW,SAAC,MAAD,EAAc,QAAd;;IAAC,SAAS;;EAEnB,EAAE,CAAC,MAAH,CAAU,MAAM,CAAC,MAAjB,EAAyB,SAAA;AAEvB,QAAA;IAAA,aAAA,WAAa,SAAC,KAAD;MAAW,IAAe,KAAf;AAAA,cAAM,MAAN;;IAAX;IACb,SAAA,GAAa,SAAC,IAAD,EAAO,QAAP;MACX,IAAA,CAAyB,EAAE,CAAC,UAAH,CAAc,IAAd,CAAzB;AAAA,eAAO,QAAA,CAAA,EAAP;;aACA,EAAE,CAAC,IAAH,CAAQ,IAAR,EAAc,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,MAAjB,EAAyB,IAAI,CAAC,QAAL,CAAc,IAAd,CAAzB,CAAd,EAA6D,QAA7D;IAFW;IAIb,QAAA,GAAa,SAAA;aACX,SAAA,CAAU,MAAM,CAAC,GAAjB,EAAsB,SAAC,KAAD;QACpB,IAAyB,KAAzB;AAAA,iBAAO,QAAA,CAAS,KAAT,EAAP;;QACA,IAA4C,EAAE,CAAC,UAAH,CAAc,MAAM,EAAC,MAAD,EAApB,CAA5C;AAAA,iBAAO,SAAA,CAAU,MAAM,EAAC,MAAD,EAAhB,EAAyB,QAAzB,EAAP;;eACA,QAAA,CAAA;MAHoB,CAAtB;IADW;IAMb,KAAA,GAAQ,MAAM,CAAC,OAAO,CAAC,KAAf,CAAA;IAER,QAAA,GAAW,SAAA;AACT,UAAA;MAAA,MAAA,GAAS,KAAK,CAAC,KAAN,CAAA;MAIT,QAAA,GAAW,MAAM,CAAC,kBAAmB,CAAA,MAAA,CAAO,CAAC;MAE7C,IAAG,MAAM,CAAC,OAAP,IAAmB,CAAC,QAAQ,CAAC,IAAhC;QACE,WAAA,GAAc,MAAM,CAAC,OADvB;OAAA,MAAA;QAGE,WAAA,GAAc,MAAM,CAAC,IAAP,GAAc,GAAd,GAAoB,MAAM,CAAC,MAA3B,GAAoC,GAApC,GAA0C,CAAC,IAAI,CAAC,OAAL,CAAa,MAAb,CAAD,EAH1D;;MAQA,IAAG,CAAC,EAAE,CAAC,UAAH,CAAc,WAAd,CAAJ;QACE,EAAE,CAAC,UAAH,CAAc,WAAd,EADF;;MAKA,IAAG,QAAQ,CAAC,IAAZ;QACE,MAAA,GAAS,WAAA,GAAc,GAAd,GAAoB,IAAI,CAAC,QAAL,CAAc,MAAd;QAC7B,OAAO,CAAC,GAAR,CAAY,SAAA,GAAU,MAAV,GAAiB,MAAjB,GAAuB,MAAnC;eAEA,EAAE,CAAC,IAAH,CAAQ,MAAR,EAAgB,MAAhB,EAAwB,SAAC,KAAD,EAAQ,MAAR;UACtB,IAA0B,KAA1B;AAAA,mBAAO,QAAA,CAAS,KAAT,EAAP;;UACA,IAAG,KAAK,CAAC,MAAT;mBAAqB,QAAA,CAAA,EAArB;WAAA,MAAA;mBAAqC,QAAA,CAAA,EAArC;;QAFsB,CAAxB,EAJF;OAAA,MAAA;eAWE,EAAE,CAAC,QAAH,CAAY,MAAZ,EAAoB,SAAC,KAAD,EAAQ,MAAR;AAClB,cAAA;UAAA,IAA0B,KAA1B;AAAA,mBAAO,QAAA,CAAS,KAAT,EAAP;;UAEA,IAAA,GAAO,MAAM,CAAC,QAAP,CAAA;UAEP,QAAA,GAAW,KAAA,CAAM,MAAN,EAAc,QAAd,EAAwB,IAAxB,EAA8B,MAA9B;UACX,MAAA,CAAO,MAAP,EAAe,QAAf,EAAyB,QAAzB,EAAmC,MAAnC;UACA,MAAA,GAAS,WAAA,GAAc,GAAd,GAAoB,CAAC,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAI,CAAC,OAAL,CAAa,MAAb,CAAtB,CAAD;UAE7B,KAAA,CAAM,MAAN,EAAc,QAAd,EAAwB,MAAxB;UACA,IAAG,KAAK,CAAC,MAAT;mBAAqB,QAAA,CAAA,EAArB;WAAA,MAAA;mBAAqC,QAAA,CAAA,EAArC;;QAVkB,CAApB,EAXF;;IApBS;WA2CX,QAAA,CAAA;EA1DuB,CAAzB;AAFS;;AA+DX,MAAM,CAAC,OAAP,GAAiB","sourcesContent":["    _           = require 'underscore'\n    fs          = require 'fs-extra'\n    path        = require 'path'\n    marked      = require 'marked'\n    commander   = require 'commander'\n    highlightjs = require 'highlight.js'\n    path        = require 'path'\n    glob        = require 'glob'\n\n    getLanguage = require './getLanguage'\n    parse = require './parse'\n    format = require './format'\n    write = require './write'\n\nGenerate the documentation for our configured source file by copying over static\nassets, reading all the source files in, splitting them up into prose+code\nsections, highlighting each file in the appropriate language, and printing them\nout in an HTML template.\n\n    document = (config = {}, callback) ->\n\n      fs.mkdirs config.output, ->\n\n        callback or= (error) -> throw error if error\n        copyAsset  = (file, callback) ->\n          return callback() unless fs.existsSync file\n          fs.copy file, path.join(config.output, path.basename(file)), callback\n\n        complete   = ->\n          copyAsset config.css, (error) ->\n            return callback error if error\n            return copyAsset config.public, callback if fs.existsSync config.public\n            callback()\n\n        files = config.sources.slice()\n\n        nextFile = () ->\n          source = files.shift()\n\nIf keeping the directory hierarchy, then insert the file's relative directory in to the path.\n\n          language = config.informationOnFiles[source].language\n\n          if config.flatten and !language.copy\n            toDirectory = config.output\n          else\n            toDirectory = config.root + '/' + config.output + '/' + (path.dirname source)\n\nMake sure the target directory exits.\n\n          # todo: async versions of exits and mkdir.\n          if !fs.existsSync(toDirectory)\n            fs.mkdirsSync(toDirectory)\n\nImplementation of copying files if specified in the language file\n\n          if language.copy\n            toFile = toDirectory + '/' + path.basename source\n            console.log \"docco: #{source} -> #{toFile}\"\n\n            fs.copy source, toFile, (error, result) ->\n              return callback(error) if error\n              if files.length then nextFile() else complete()\n\nImplementation of spliting comments and code into split view html files.\n\n          else\n            fs.readFile source, (error, buffer) ->\n              return callback(error) if error\n\n              code = buffer.toString()\n\n              sections = parse source, language, code, config\n              format source, language, sections, config\n              toFile = toDirectory + '/' + (path.basename source, path.extname source)\n\n              write source, sections, config\n              if files.length then nextFile() else complete()\n\n        nextFile()\n      return\n\n    module.exports = document\n"]}