{"version":3,"file":"buildMatchers.js","sources":["buildMatchers.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,MAAM,CAAC,OAAP,GAAiB,aAAA,GAAgB,SAAC,SAAD;AAC/B,MAAA;AAAA,OAAA,gBAAA;;IAIE,CAAC,CAAC,cAAF,GAAmB,MAAA,CAAA,OAAA,GAAS,CAAC,CAAC,MAAX,GAAkB,MAAlB;IAInB,CAAC,CAAC,aAAF,GAAkB;IAIlB,IAAG,CAAC,CAAC,IAAL;MACE,CAAC,CAAC,YAAF,GAAiB,MAAA,CAAA,GAAA,GAAM,CAAC,CAAC,IAAR,GAAa,sBAAb;MACjB,CAAC,CAAC,WAAF,GAAgB,oBAFlB;;IAKA,IAAG,CAAC,CAAC,OAAL;MACE,CAAC,CAAC,cAAF,GAAmB,MAAA,CAAA,GAAA,GAAM,CAAC,CAAC,OAAR,GAAgB,MAAhB,EADrB;;IAMA,IAAG,CAAC,CAAC,SAAL;MAEE,KAAA,GAAQ,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,OAAlB,CAA0B,SAA1B,EAAoC,MAApC;MACR,IAAA,GAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAjB,CAAyB,SAAzB,EAAmC,MAAnC;MAEP,CAAC,CAAC,YAAF,GAAiB,MAAA,CAAA,OAAA,GAAS,KAAT;MACjB,CAAC,CAAC,WAAF,GAAgB,MAAA,CAAA,OAAA,GAAS,IAAT,EANlB;;IAQA,IAAG,CAAC,CAAC,IAAL;MACE,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,OAAP,CAAe,SAAf,EAAyB,MAAzB;MACT,CAAC,CAAC,WAAF,GAAgB,MAAA,CAAA,OAAA,GAAS,CAAC,CAAC,IAAX,EAFlB;;AA/BF;SAmCA;AApC+B","sourcesContent":["Build out the appropriate matchers and delimiters for each language.\n\n    module.exports = buildMatchers = (languages) ->\n      for ext, l of languages\n\nDoes the line begin with a comment?\n\n        l.commentMatcher = ///^\\s*#{l.symbol}\\s?///\n\nIgnore [hashbangs](http://en.wikipedia.org/wiki/Shebang_%28Unix%29) and interpolations...\n\n        l.commentFilter = /(^#![/]|^\\s*#\\{)/\n\nLook for links if necessary.\n\n        if l.link\n          l.imageMatcher = ///^#{l.link}\\[(.+)\\]\\((.+)\\)///\n          l.linkMatcher = ///^\\[(.+)\\]\\((.+)\\)///\nLook for explict section breaks\n\n        if l.section\n          l.sectionMatcher = ///^#{l.section}\\s?///\n\nLook for multiline comments.  The tricky part here is that the characters need to be escaped.\n\n\n        if l.multiline\n          # use replace to insert a '\\' in front of every character\n          start = l.multiline.start.replace(/(.{1})/g,\"\\\\$1\")\n          stop = l.multiline.stop.replace(/(.{1})/g,\"\\\\$1\")\n\n          l.startMatcher = ///^\\s*#{start}///\n          l.stopMatcher = ///^\\s*#{stop}///\n\n        if l.code\n          l.code = l.code.replace(/(.{1})/g,\"\\\\$1\")\n          l.codeMatcher = ///^\\s*#{l.code}///\n\n      languages\n"]}