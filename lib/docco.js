// Generated by CoffeeScript 1.3.3
(function() {
  var destination, doccoStyles, doccoTemplate, ensureDirectory, exec, ext, fs, generateDocumentation, generateHtml, getLanguage, getResource, highlight, highlightEnd, highlightStart, l, languages, parse, path, showdown, spawn, template, _ref;

  generateDocumentation = function(sources, source, callback) {
    return fs.readFile(source, function(error, buffer) {
      var code, sections;
      if (error) {
        throw error;
      }
      code = buffer.toString();
      sections = parse(source, code);
      return highlight(source, sections, function() {
        generateHtml(sources, source, sections);
        return callback();
      });
    });
  };

  parse = function(source, code) {
    var codeText, docsText, hasCode, language, line, lines, save, sections, _i, _len;
    lines = code.split('\n');
    sections = [];
    language = getLanguage(source);
    hasCode = docsText = codeText = '';
    save = function(docsText, codeText) {
      return sections.push({
        docsText: docsText,
        codeText: codeText
      });
    };
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      if (line.match(language.commentMatcher) && !line.match(language.commentFilter)) {
        if (hasCode) {
          save(docsText, codeText);
          hasCode = docsText = codeText = '';
        }
        docsText += line.replace(language.commentMatcher, '') + '\n';
      } else {
        hasCode = true;
        codeText += line + '\n';
      }
    }
    save(docsText, codeText);
    return sections;
  };

  highlight = function(source, sections, callback) {
    var language, output, pygments, section, text;
    language = getLanguage(source);
    pygments = spawn('pygmentize', ['-l', language.name, '-f', 'html', '-O', 'encoding=utf-8,tabsize=2']);
    output = '';
    pygments.stderr.addListener('data', function(error) {
      if (error) {
        return console.error(error.toString());
      }
    });
    pygments.stdin.addListener('error', function(error) {
      console.error("Could not use Pygments to highlight the source.");
      return process.exit(1);
    });
    pygments.stdout.addListener('data', function(result) {
      if (result) {
        return output += result;
      }
    });
    pygments.addListener('exit', function() {
      var fragments, i, section, _i, _len;
      output = output.replace(highlightStart, '').replace(highlightEnd, '');
      fragments = output.split(language.dividerHtml);
      for (i = _i = 0, _len = sections.length; _i < _len; i = ++_i) {
        section = sections[i];
        section.codeHtml = highlightStart + fragments[i] + highlightEnd;
        section.docsHtml = showdown.makeHtml(section.docsText);
      }
      return callback();
    });
    if (pygments.stdin.writable) {
      text = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = sections.length; _i < _len; _i++) {
          section = sections[_i];
          _results.push(section.codeText);
        }
        return _results;
      })();
      pygments.stdin.write(text.join(language.dividerText));
      return pygments.stdin.end();
    }
  };

  generateHtml = function(sources, source, sections) {
    var dest, html, title;
    title = path.basename(source);
    dest = destination(source);
    html = doccoTemplate({
      title: title,
      sections: sections,
      sources: sources,
      path: path,
      destination: destination
    });
    console.log("docco: " + source + " -> " + dest);
    return fs.writeFile(dest, html);
  };

  fs = require('fs');

  path = require('path');

  showdown = require('./../vendor/showdown').Showdown;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  getResource = function(name) {
    var fullPath;
    fullPath = path.join(__dirname, '..', 'resources', name);
    return fs.readFileSync(fullPath).toString();
  };

  languages = JSON.parse(getResource('languages.json'));

  for (ext in languages) {
    l = languages[ext];
    l.commentMatcher = RegExp("^\\s*" + l.symbol + "\\s?");
    l.commentFilter = /(^#![/]|^\s*#\{)/;
    l.dividerText = "\n" + l.symbol + "DIVIDER\n";
    l.dividerHtml = RegExp("\\n*<span\\sclass=\"c1?\">" + l.symbol + "DIVIDER<\\/span>\\n*");
  }

  getLanguage = function(source) {
    return languages[path.extname(source)];
  };

  destination = function(filepath) {
    var basename;
    basename = path.basename(filepath, path.extname(filepath));
    return "docs/" + basename + ".html";
  };

  ensureDirectory = function(dir, callback) {
    return exec("mkdir -p " + dir, function() {
      return callback();
    });
  };

  template = function(str) {
    return new Function('obj', 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'with(obj){p.push(\'' + str.replace(/[\r\t\n]/g, " ").replace(/'(?=[^<]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.+?)%>/g, "',$1,'").split('<%').join("');").split('%>').join("p.push('") + "');}return p.join('');");
  };

  doccoTemplate = template(getResource('docco.jst'));

  doccoStyles = getResource('docco.css');

  highlightStart = '<div class="highlight"><pre>';

  highlightEnd = '</pre></div>';

  exports.generate = function(list) {
    var sources;
    if (!list.length) {
      throw new Error("No files for docco");
    }
    sources = list.slice().sort();
    return ensureDirectory('docs', function() {
      var files, nextFile;
      fs.writeFile('docs/docco.css', doccoStyles);
      files = sources.slice(0);
      nextFile = function() {
        if (files.length) {
          return generateDocumentation(sources, files.shift(), nextFile);
        }
      };
      return nextFile();
    });
  };

}).call(this);
